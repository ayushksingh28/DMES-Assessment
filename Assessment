Problem 2: 8-Queen Problem

Code:
N = 8
# outputs a valid setup for 8 queens. can do so for any number
board = [[0]*N for _ in range(N)]
def attack(i, j):
    for k in range(0,N):
        if board[i][k]==1 or board[k][j]==1:
            return True
    for k in range(0,N):
        for l in range(0,N):
            if (k+l==i+j) or (k-l==i-j):
                if board[k][l]==1:
                    return True
    return False
 
def N_queens(n):
    if n==0:
        return True
    for i in range(0,N):
        for j in range(0,N):
            if (not(attack(i,j))) and (board[i][j]!=1):
                board[i][j] = 1
                if N_queens(n-1)==True:
                    return True
                board[i][j] = 0
    return False
 
N_queens(N)
for i in board:
    print (i)
    
    
    
    
    
Problem 3: Missionary and Cannibals

Code: 
#include <bits/stdc++.h>
using namespace std;
struct StateSTR
{
    int Mlhs;
    int Clhs;
    int pos;
    int Mrhs;
    int Crhs;
    StateSTR *parent;
    int opUsed;
    bool operator==(const StateSTR &rhs) const
    {
        return ((Mlhs == rhs.Mlhs) && (Clhs == rhs.Clhs) &&
                (Mrhs == rhs.Mrhs) && (Crhs == rhs.Crhs) &&
                (pos == rhs.pos));
    }
};
ostream &operator<<(ostream &out, const StateSTR &s)
{
    out << "Mlhs:" << s.Mlhs << endl;
    out << "Clhs:" << s.Clhs << endl;
    out << "Boat:" << s.pos << endl;
    out << "Mrhs:" << s.Mrhs << endl;
    out << "Crhs:" << s.Crhs << endl
        << endl;
    return out;
}
bool validState(StateSTR *S)
{
    if (((*S).Clhs < 0) || ((*S).Clhs > 3))
        return false;
    if (((*S).Crhs < 0) || ((*S).Crhs > 3))
        return false;
    if (((*S).Mlhs < 0) || ((*S).Mlhs > 3))
        return false;
    if (((*S).Mrhs < 0) || ((*S).Mrhs > 3))
        return false;
    if (((*S).pos != 0) && ((*S).pos != 1))
        return false;
    if ((((*S).Clhs > (*S).Mlhs) && ((*S).Mlhs > 0)) ||
        (((*S).Crhs > (*S).Mrhs) && ((*S).Mrhs > 0)))
        return false;
    return true;
}
 
StateSTR *nextState(StateSTR *Z, const int j)
{
    StateSTR *S = new StateSTR();
    (*S) = (*Z);
    (*S).opUsed = j;
    switch (j)
    {
    case 0:
    {
        (*S).pos -= 1;
        (*S).Mlhs += 0;
        (*S).Clhs += 1;
        (*S).Mrhs -= 0;
        (*S).Crhs -= 1;
    }
    break;
    case 1:
    {
        (*S).pos -= 1;
        (*S).Mlhs += 0;
        (*S).Clhs += 2;
        (*S).Mrhs -= 0;
        (*S).Crhs -= 2;
    }
    break;
    case 2:
    {
        (*S).pos -= 1;
        (*S).Mlhs += 1;
        (*S).Clhs += 0;
        (*S).Mrhs -= 1;
        (*S).Crhs -= 0;
    }
    break;
    case 3:
    {
        (*S).pos -= 1;
        (*S).Mlhs += 2;
        (*S).Clhs += 0;
        (*S).Mrhs -= 2;
        (*S).Crhs -= 0;
    }
    break;
    case 4:
    {
        (*S).pos -= 1;
        (*S).Mlhs += 1;
        (*S).Clhs += 1;
        (*S).Mrhs -= 1;
        (*S).Crhs -= 1;
    }
    break;
    case 5:
    {
        (*S).pos += 1;
        (*S).Mrhs += 0;
        (*S).Crhs += 1;
        (*S).Mlhs -= 0;
        (*S).Clhs -= 1;
    }
    break;
    case 6:
    {
        (*S).pos += 1;
        (*S).Mrhs += 0;
        (*S).Crhs += 2;
        (*S).Mlhs -= 0;
        (*S).Clhs -= 2;
    }
    break;
    case 7:
    {
        (*S).pos += 1;
        (*S).Mrhs += 1;
        (*S).Crhs += 0;
        (*S).Mlhs -= 1;
        (*S).Clhs -= 0;
    }
    break;
    case 8:
    {
        (*S).pos += 1;
        (*S).Mrhs += 2;
        (*S).Crhs += 0;
        (*S).Mlhs -= 2;
        (*S).Clhs -= 0;
    }
    break;
    case 9:
    {
        (*S).pos += 1;
        (*S).Mrhs += 1;
        (*S).Crhs += 1;
        (*S).Mlhs -= 1;
        (*S).Clhs -= 1;
    }
    break;
    }
    return S;
}
bool notFound(StateSTR *Y, list<StateSTR *> OPEN,
              list<StateSTR *> CLOSED)
{
    list<StateSTR *>::iterator itr1 = OPEN.begin();
    list<StateSTR *>::iterator itr2 = CLOSED.begin();
    for (; itr1 != OPEN.end(); itr1++)
        if ((*(*itr1)) == (*Y))
            break;
    for (; itr2 != CLOSED.end(); itr2++)
        if ((*(*itr2)) == (*Y))
            break;
    if ((itr1 == OPEN.end()) && (itr2 == CLOSED.end()))
        return true;
    return false;
}
void addChildren(list<StateSTR *> &OPEN,
                 list<StateSTR *> &CLOSED, StateSTR *Y)
{
    StateSTR *tState;
    for (int i = 0; i < 10; i++)
    {
        tState = nextState(Y, i);
        if ((validState(tState)) &&
            (notFound(tState, OPEN, CLOSED)))
        {
            (*tState).parent = Y;
            OPEN.push_front(tState);
        }
        else
            delete tState;
    }
    return;
}
void printOP(int n)
{
    switch (n)
    {
    case 0:
        cout << "C(0,1,0)" << endl;
        break;
    case 1:
        cout << "C(0,2,0)" << endl;
        break;
    case 2:
        cout << "C(1,0,0)" << endl;
        break;
    case 3:
        cout << "C(2,0,0)" << endl;
        break;
    case 4:
        cout << "C(1,1,0)" << endl;
        break;
    case 5:
        cout << "C(0,1,1)" << endl;
        break;
    case 6:
        cout << "C(0,2,1)" << endl;
        break;
    case 7:
        cout << "C(1,0,1)" << endl;
        break;
    case 8:
        cout << "C(2,0,1)" << endl;
        break;
    case 9:
        cout << "C(1,1,1)" << endl;
        break;
    }
}
int main()
{
    bool searchResult = false;
    stack<int> opsUsed;
    StateSTR START = {3, 3, 0, 0, 0, NULL, -1};
    StateSTR GOAL = {0, 0, 1, 3, 3, NULL};
    StateSTR *X;
    StateSTR *tempState;
    list<StateSTR *> OPEN;
    list<StateSTR *> CLOSED;
    OPEN.push_front(&START);
    while (!OPEN.empty())
    {
        X = OPEN.front();
        OPEN.pop_front();
        if ((*X) == GOAL)
        {
            searchResult = true;
            break;
        }
        else
        {
            addChildren(OPEN, CLOSED, X);
            CLOSED.push_back(X);
        }
    }
    // Display results
    if (searchResult == true)
    {
        cout << endl
             << "PATH" << endl;
        for (StateSTR *p = X; p != NULL; p = (*p).parent)
            opsUsed.push((*p).opUsed);
    }
    while (!opsUsed.empty())
    {
        printOP(opsUsed.top());
        opsUsed.pop();
    }
    cout << endl;
    return 0;
}



Problem 4:  Vacuum Problem

Code: 
def vacuum_world():
    goal_state = {'A': '0', 'B': '0'}
    cost = 0
    location_input = input("Enter Location of Vacuum")
    print("Initial Location Condition" + str(goal_state))
    if location_input == 'A':
    if status_input == '1':
        print("Location A is Dirty.")
        goal_state['A'] = '0'
        cost += 1 #cost for suck
        print("Cost for CLEANING A " + str(cost))
        print("Location A has been Cleaned.")
    if status_input_complement == '1':
        print("Location B is Dirty.")
        print("Moving right to the Location B. ")
        cost += 1 #cost for moving right
        print("COST for moving RIGHT" + str(cost))
        goal_state['B'] = '0' cost += 1 #cost for suck
        print("COST for SUCK " + str(cost))
        print("Location B has been Cleaned. ")
    else:
        print("No action" + str(cost))
        print("Location B is already clean.")
    if status_input == '0':
        print("Location A is already clean ")
    if status_input_complement == '1':# if B is Dirty
        print("Location B is Dirty.")
        print("Moving RIGHT to the Location B. ")
        cost += 1 #cost for moving right
        print("COST for moving RIGHT " + str(cost))
        # suck the dirt and mark it as clean
        goal_state['B'] = '0' cost += 1 #cost for suck
        print("Cost for SUCK" + str(cost))
        print("Location B has been Cleaned. ")
    else:
        print("No action " + str(cost))
        print(cost)
        print("Location B is already clean.")
    else:
        print("Vacuum is placed in location B")
    if status_input == '1':
        print("Location B is Dirty.")
        goal_state['B'] = '0' cost += 1 # cost for suck
        print("COST for CLEANING " + str(cost))
        print("Location B has been Cleaned.")
    if status_input_complement == '1':
        print("Location A is Dirty.")
        print("Moving LEFT to the Location A. ")
        cost += 1 # cost for moving right
        print("COST for moving LEFT" + str(cost))
        # suck the dirt and mark it as clean
        goal_state['A'] = '0' cost += 1 # cost for suck
        print("COST for SUCK " + str(cost))
        print("Location A has been Cleaned.")
    else:
        print(cost)
        print("Location B is already clean.")
    if status_input_complement == '1': # if A is Dirty
        print("Location A is Dirty.")
        print("Moving LEFT to the Location A. ")
        cost += 1 # cost for moving right
        print("COST for moving LEFT " + str(cost))
        goal_state['A'] = '0' cost += 1 # cost for suck
        print("Cost for SUCK " + str(cost))
        print("Location A has been Cleaned. ")
    else:
        print("No action " + str(cost))
        print("Location A is already clean.")
        print("GOAL STATE: ")
        print(goal_state)
        print("Performance Measurement: " + str(cost))
vacuum_world()

